https://www.goodreads.com/book/show/4099.The_Pragmatic_Programmer
Programming, like reading and writing, is ultimately a private, personal activity, and to be honest, most of us software engineers were that closeted high school nerd at some point, and draw upon that focused, single-minded persona when we do things like coding, so there are lessons to be learned from taking a step back occasionally and examining the craft, as Hunt and Thomas do.
I no longer have any need for mentors or friends now that I have AVClub (the AVQ&A and "Gateways to Geekery" columns in particular), Quora, and Stack Overflow.Case in point: That I found this book.
So I go to Stack Overflow and find my way to a question like "What programming book do you wish you had read early in your career?" This book is the top answer.The think I like about this book is that it is very high level and it makes a lot of sense.
Unlike most books on coding, this one has aged/will age very well.Out of the many good points made in this book, three of them are my main motivation lately:1.
Perhaps this book didn't speak to you at the point you are at in developing your skills and crafts, but it might speak to someone else just beginning.
The information contained in this book is essential for software developers who want to develop their skills and knowledge into a craft worthy of renown, to become masters of the field.
What is *not* dated are the principles, the tips, the stories, the **wisdom** of this book.As I was reading it, it felt all so familiar.
Yes, most anyone who has been at the craft of software development will probably recognize much of this.
There is definitely some good stuff in here, but most won't be new for anyone who's been programming professionally for 2 or 3 years or more.
I think most engineers' problems is that they don't do what they know is the right thing.I think many people have said this before, but at the risk of duplication I'll say that the book contains a lot of common sense codified.
Thing is many of them feel more like personality traits than things you can 'learn' or 'decide' to do....such as:* learn new things (languages, editors, frameworks)* see how things work* if something's broken find out why, don't just get tests passing* if you find rotten code, refactor* try to learn keyboard shortcuts* write time-saving scripts and tools (like Robert just did!
For a total beginner, the concepts will be difficult to internalize. For a seasoned programmer (on a good team...), it will be little more than a general reinforcement. While it's hard to imagine the right time in one's career to read the The Pragmatic Programmer (probably, often), it's a classic. It's written at a high enough level that very little material is outdated. In fact, some of the arguments ring much truer now than they would have in 1999.See this review and others on my blog
It explores good software development practices.
In my opinion it is more than just a checklist of what you should do - it literally changed my approach to development with positive results.Others have mentionned that they already knew most of the things in this book, and practice these good habits in their development environments.
Any one of these environments would have been vastly improved if some of these practices were incorporated.
For the rest of us, I think this is chocked full of high-level abstract concepts that will improve any development environment.
I have changed my job after reading this book. So be careful :-)
Who is this book for?Certainly not for experienced, skilled software developers.
Had I read it in 1999, I wouldn't have known any of these things.The question is, though: would I have been able to use this book for anything back then?
In that sense, it lives up to its titular pragmatism.Still, it leaves me with the feeling that if you don't already know how to work in this way, will you be able to learn it from the book?
Thus, I have much respect for the authors; in 1999, they were certainly at the bleeding edge of modern software development (perhaps they still are today), but I don't think the book stands the test of time.

In fact, it's a good book... if you're just beginning to program. I've just read it late, so it contains nothing new to me. I can't imagine that there are software developers who don't know about practices described in this book. Besides, it's already outdated (RCS? Really?).As to Russian edition of this book, it's translated very badly, it's almost unreadable.
A Pragmatic ApproachTip 11: DRY—Don't Repeat YourselfDuplication can happen when it’s imposed by the environment, when developers don’t realize they’re duplicating code, when we get lazy, code duplicated across different teamsTip 12: Make It Easy to ReuseThrough the following: Tip 13: Eliminate Effects Between Unrelated Things (Orthogonality)unrelated modules should be self-contained and independent, if you change one, the others shouldn’t change dramaticallyTip 14: There Are No Final Decisions (Reversibility)Tip 15: Use Tracer Bullets to Find the Targetget the code out thereTip 16: Prototype to LearnPrototyping is a learning experience.
The beautiful thing about a book like The Pragmatic Programmer is that it sparks ideas when you read it.
Nevertheless, I found myself reading a page or two and then having to stop because I was having a great idea and needed to write it down.
That's six pages of Great Ideas about software.
I ended the day with a finished book, those six pages of notes, and a whole new enthusiasm for my software projects.
What I love most about a tracer bullet system: you will probably end up with something you can demonstrate to non-programmers!
This was a great book for programmers to read. It had a lot of very general, yet very useful advice for programmers. I loved the broken window theory of programming. Malcolm Gladwell argues the same theory cured New York's crime wave in the 90's in  Blink
chicken soup for the programmer's soul
I enjoyed the pragmatic programmer.
Still I found myself skipping sections, especially where I felt the subjects discussed I already had a good grip on.
Other parts just felt dated, like the sections on source control and "modular code" in the age of distributed git, npm and microservices.
I would definitely recommend this to programmers looking to up their game.
The advice this book gives for you to become a better programmer is solid, and you'll find yourself agreeing with it.
You should especially pay attention to the more general software design aspects the book discusses.
If you can stomach those two things, the rest of the book is packed with, plain English, fad-free, common sense (and not so common sense) advice that you can actually apply.You get a survey of all these cool technologies (again, nothing fad-like) that you could maybe give a spin to or that you've heard off but never got over the inertia to try out (although one wonders how many false problems would just go away if you would just use a purely functional programming language).
The Pragmatic Programmer is centered on good programming practices. It is very well written and is able to persuade you to want to change your habits and behavior. I intend on re-reading this book on a regular basis (anually, perhaps) because there is certainly a learning and adaptation curve to all the techniques that are introduced. Although I do use some of them on my day-to-day work, it's very difficult to start using every single tip at once, so I'll introduce them gradually on my working flow and hopefully become a better overall developer!
This is probably my favorite book about technology. Full of great and timeless advice for anyone working on the field; written by one of my biggest inspirations in programming, master Dave Thomas.It's more philosophical than technical which makes it a nice and easy read.The book is not written in linear way so whenever you need inspiration, you can just open it in a random page and get charged up. Reason why I have a hard copy with me.I've read it twice already and I will probably read it again. This book made me a better programmer.
A great non technical book that goes into codifying the good practices about software development. It is a must read for neophytes in software industry with a couple of years of experience. If you have worked or are working in a good team and good project, you can easily relate back and forth about the goof things that are talked about.It is simple to read, still relevant in 2016 and is worth investing couple of weeks to read this if you are aspiring to be a pragmatic programmer.
Terrific book. Great thing explained in the most pragmatic way possible. Due to its usage of metaphors, easy-to-read language, it read like a breeze. I might have forgotten some of the great stuff in it, might actually reread it soon.
Analyze information in terms of you and your project.DRY—Don’t Repeat YourselfEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system.Eliminate Effects Between Unrelated ThingsDesign components that are self-contained, independent, and have a single, well-defined purpose.Use Tracer Bullets to Find the TargetTracer bullets let you home in on your target by trying things and seeing how close they land.Program Close to the Problem DomainDesign and code in your user’s language.Iterate the Schedule with the CodeUse experience you gain as you implement to refine the project time scales.Use the Power of Command ShellsUse the shell when graphical user interfaces don’t cut it.Always Use Source Code ControlSource code control is a time machine for your work—you can go back.Don’t Panic When DebuggingTake a deep breath and THINK!
This is a good first read for fresh grads coming into the industry.
A non-exhaustive list would include: how to behave professionally; how to write good code; find and use the right tools; how to work with others; and last but not least, how to manage software development projects.As you may have guessed, this amount of subjects can not be covered in depth in a 300 pages book.
As a result, the book can only provide an overview of what it means to be a professional software developer, but does not necessarily give you a clear path on how to get there.
Dated but still useful; many ideas continue to apply today.Key takeaways?- orthogonality/ownership in teams- one source of truth/model, everything else is a view — including schemas/source (codegen)- pub/sub is a useful paradigm- prototyping is important - automation (try git commit hooks)
Kláraði ekki. Skil ekki hæpið við þessa bók. Að stærstum hluta augljós sannindi. Ráðin eru of sértæk til að skilja eitthvað eftir sig, en samt of almenn til að nota í raunverulegu verkefni.
A very insightful read. I look at my projects differently after reading this. It doesn't focus on a particular language, but rather teaches principles.
I think I highlighted like 90% of this book.As old as this book is; it is still very relevant. It's another book I know I'll be referencing often. I highly recommend this book.
به عنوان یک برنامه نویس مبتدی چیزهای زیادی از این کتاب یادگرفتم. مثال های عالی توی هر قسمت زده شده و حتی اگر قسمتی از کتاب هم قدیمی شده باشد با توجه به تاریخ نشرش واقعا ارزش خوندن رو داره .
One of the must read book for software engineers regardless which technologies you are working on.
pragmatic book, oozing with arguments in favor of common sense practices which should be used in all projects, no matter the scale or purpose.
Some chapters are a bit stale - chapter 3 "The Basic Tools" and chapter 6 "While you are coding" were my least favorite and the main reason I haven't rated the book 5 stars.
The first 2 chapters were really enjoyable and the last one "Before the project" is amazing.All in all, I'm glad I picked up this book.
In an abstract sense, an application is successful if it correctly implements its specifications.
It's a good intro to a common sense in the art of programming. If you are just starting programming or want to validate your prior knowledge and habits then this book is for you. The book has good structure and all main points are highlighted, so you can skim it fast.
